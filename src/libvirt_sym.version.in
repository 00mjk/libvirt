/*
 * WARNING: libvirt_sym.version.in  is the master file
 *
 * WARNING: libvirt_sym.version is auto-generated by configure
 */

/*
 * First officially exported symbols, for which header
 * file definitions are installed in /usr/include/libvirt
 * either from libvirt.h and virterror.h
 *
 * Versions here are *fixed* to match the libvirt version
 * at which the symbol was introduced. This ensures that
 * a new client app requiring symbol foo() can't accidentally
 * run with old libvirt.so not providing foo() - the global
 * soname version info can't enforce this since we never
 * change the soname
 */
LIBVIRT_0.0.3 {
    global:
	virConnectClose;
	virConnectGetType;
	virConnectGetVersion;
	virConnectListDomains;
	virConnectNumOfDomains;
	virConnectOpen;
	virConnectOpenReadOnly;

	virDomainCreateLinux;
	virDomainDestroy;
	virDomainFree;
	virDomainGetID;
	virDomainGetInfo;
	virDomainGetMaxMemory;
	virDomainGetName;
	virDomainGetOSType;
	virDomainGetXMLDesc;
	virDomainLookupByID;
	virDomainLookupByName;
	virDomainRestore;
	virDomainResume;
	virDomainSave;
	virDomainSetMaxMemory;
	virDomainShutdown;
	virDomainSuspend;

	virGetVersion;
};

LIBVIRT_0.0.5 {
    global:
	virDomainLookupByUUID;
	virDomainGetUUID;
} LIBVIRT_0.0.3;

LIBVIRT_0.1.0 {
    global:
	virInitialize;
	virNodeGetInfo;
	virDomainReboot;

	virCopyLastError;
	virConnSetErrorFunc;
	virResetLastError;
	virErrorFunc;
	virResetError;
	virConnGetLastError;
	virGetLastError;
	virSetErrorFunc;
	virConnCopyLastError;
	virConnResetLastError;
	virDefaultErrorFunc;
} LIBVIRT_0.0.5;

LIBVIRT_0.1.1 {
    global:
	virDomainLookupByUUIDString;
	virDomainGetUUIDString;
	virDomainSetMemory;
	virDomainDefineXML;
	virDomainCreate;
	virDomainUndefine;
	virConnectListDefinedDomains;
} LIBVIRT_0.1.0;

LIBVIRT_0.1.4 {
    global:
	virDomainSetVcpus;
	virDomainPinVcpu;
	virDomainGetVcpus;
} LIBVIRT_0.1.1;

LIBVIRT_0.1.5 {
    global:
	virConnectNumOfDefinedDomains;
} LIBVIRT_0.1.4;

LIBVIRT_0.1.9 {
    global:
	virDomainCoreDump;
	virDomainAttachDevice;
	virDomainDetachDevice;
} LIBVIRT_0.1.5;

LIBVIRT_0.2.0 {
    global:
	virConnectNumOfNetworks;
	virConnectListNetworks;
	virConnectNumOfDefinedNetworks;
	virConnectListDefinedNetworks;
	virNetworkLookupByName;
	virNetworkLookupByUUID;
	virNetworkLookupByUUIDString;
	virNetworkCreateXML;
	virNetworkDefineXML;
	virNetworkUndefine;
	virNetworkCreate;
	virNetworkDestroy;
	virNetworkFree;
	virNetworkGetName;
	virNetworkGetUUID;
	virNetworkGetUUIDString;
	virNetworkGetXMLDesc;
	virNetworkGetBridgeName;
} LIBVIRT_0.1.9;

LIBVIRT_0.2.1 {
    global:
	virConnectGetCapabilities;
	virConnectGetMaxVcpus;
	virDomainGetMaxVcpus;
	virDomainGetAutostart;
	virDomainSetAutostart;
	virNetworkGetAutostart;
	virNetworkSetAutostart;
} LIBVIRT_0.2.0;

LIBVIRT_0.2.3 {
    global:
	virDomainGetSchedulerType;
	virDomainGetSchedulerParameters;
	virDomainSetSchedulerParameters;
} LIBVIRT_0.2.1;

LIBVIRT_0.3.0 {
    global:
	virConnectGetHostname;
	virConnectGetURI;
	virDomainGetConnect;
	virNetworkGetConnect;
} LIBVIRT_0.2.3;

LIBVIRT_0.3.2 {
    global:
	virDomainMigrate;
	virDomainBlockStats;
	virDomainInterfaceStats;
} LIBVIRT_0.3.0;

LIBVIRT_0.3.3 {
    global:
	virNodeGetCellsFreeMemory;
	virNodeGetFreeMemory;
} LIBVIRT_0.3.2;

LIBVIRT_0.4.0 {
    global:
	virConnectOpenAuth;
	virConnectAuthPtrDefault;
} LIBVIRT_0.3.3;

LIBVIRT_0.4.1 {
    global:
	virStoragePoolGetConnect;
	virConnectNumOfStoragePools;
	virConnectNumOfDefinedStoragePools;
	virConnectListStoragePools;
	virConnectListDefinedStoragePools;
	virStoragePoolLookupByName;
	virStoragePoolLookupByUUID;
	virStoragePoolLookupByUUIDString;
	virStoragePoolLookupByVolume;
	virStoragePoolCreateXML;
	virStoragePoolDefineXML;
	virStoragePoolUndefine;
	virStoragePoolCreate;
	virStoragePoolBuild;
	virStoragePoolDestroy;
	virStoragePoolDelete;
	virStoragePoolRefresh;
	virStoragePoolFree;
	virStoragePoolGetName;
	virStoragePoolGetUUID;
	virStoragePoolGetUUIDString;
	virStoragePoolGetInfo;
	virStoragePoolGetXMLDesc;
	virStoragePoolSetAutostart;
	virStoragePoolGetAutostart;
	virStoragePoolNumOfVolumes;
	virStoragePoolListVolumes;

	virConnectNumOfStorageVolumes;
	virConnectListStorageVolumes;
	virStorageVolGetConnect;
	virStorageVolLookupByName;
	virStorageVolLookupByKey;
	virStorageVolLookupByPath;
	virStorageVolCreateXML;
	virStorageVolDelete;
	virStorageVolFree;
	virStorageVolGetName;
	virStorageVolGetKey;
	virStorageVolGetInfo;
	virStorageVolGetXMLDesc;
	virStorageVolGetPath;
} LIBVIRT_0.4.0;

LIBVIRT_0.4.2 {
    global:
	virDomainBlockPeek;
	virDomainMemoryPeek;
} LIBVIRT_0.4.1;

LIBVIRT_0.4.5 {
    global:
	virConnectFindStoragePoolSources;
} LIBVIRT_0.4.2;

LIBVIRT_0.5.0 {
    global:
	virDomainCreateXML;
	virEventRegisterImpl;
	virConnectDomainEventRegister;
	virConnectDomainEventDeregister;
} LIBVIRT_0.4.5;

/* .... define new API here using predicted next version number .... */




/*
 * Finally these symbols are private and semantics may change
 * on every release, hence the version number is spliced in at
 * build time. This ensures that if libvirtd, virsh, or a driver
 * module was built against one libvirt release, it will refuse
 * to load with another where symbols may have same names but
 * different semantics.
 *
 * No header files are provided outside the source tree.
 *
 * Keep this section ordered alphabetically by header file name
 *
 * Symbols here are only for use by virsh, libvirtd and dlopen
 * driver modules
 */
LIBVIRT_PRIVATE_@VERSION@ {

  global:
	/* bridge.h */
	brAddBridge;
	brAddInterface;
	brAddTap;
	brDeleteBridge;
	brInit;
	brSetEnableSTP;
	brSetForwardDelay;
	brSetInetAddress;
	brSetInetNetmask;
	brSetInterfaceUp;
	brShutdown;


	/* buf.h */
	virBufferVSprintf;
	virBufferAdd;
	virBufferAddChar;
	virBufferContentAndReset;
	virBufferError;


	/* caps.h */
	virCapabilitiesAddGuest;
	virCapabilitiesAddGuestDomain;
	virCapabilitiesAddGuestFeature;
	virCapabilitiesAddHostNUMACell;
	virCapabilitiesDefaultGuestEmulator;
	virCapabilitiesFormatXML;
	virCapabilitiesFree;
	virCapabilitiesNew;
	virCapabilitiesSetMacPrefix;


	/* conf.h */
	virConfNew;
	virConfReadFile;
	virConfReadMem;
	virConfFree;
	virConfGetValue;
	virConfSetValue;
	virConfWriteFile;
	virConfWriteMem;


	/* datatypes.h */
	virGetDomain;
	virGetNetwork;
	virGetStoragePool;
	virGetStorageVol;


	/* domain_conf.h */
	virDiskNameToBusDeviceIndex;
	virDiskNameToIndex;
	virDomainAssignDef;
	virDomainConfigFile;
	virDomainDefDefaultEmulator;
	virDomainDefFormat;
	virDomainDefFree;
	virDomainDefParseFile;
	virDomainDefParseString;
	virDomainDeleteConfig;
	virDomainDeviceDefParse;
	virDomainDiskBusTypeToString;
	virDomainDiskDeviceTypeToString;
	virDomainDiskQSort;
	virDomainEventCallbackListAdd;
	virDomainEventCallbackListFree;
	virDomainEventCallbackListRemove;
	virDomainFindByID;
	virDomainFindByName;
	virDomainFindByUUID;
	virDomainLoadAllConfigs;
	virDomainObjListFree;
	virDomainRemoveInactive;
	virDomainSaveConfig;
	virDomainSoundModelTypeToString;
	virDomainVirtTypeToString;


	/* iptables.h */
	iptablesAddForwardAllowCross;
	iptablesAddForwardAllowIn;
	iptablesAddForwardAllowOut;
	iptablesAddForwardAllowRelatedIn;
	iptablesAddForwardMasquerade;
	iptablesAddForwardRejectIn;
	iptablesAddForwardRejectOut;
	iptablesAddTcpInput;
	iptablesAddUdpInput;
	iptablesContextFree;
	iptablesContextNew;
	iptablesReloadRules;
	iptablesRemoveForwardAllowCross;
	iptablesRemoveForwardAllowIn;
	iptablesRemoveForwardAllowOut;
	iptablesRemoveForwardAllowRelatedIn;
	iptablesRemoveForwardMasquerade;
	iptablesRemoveForwardRejectIn;
	iptablesRemoveForwardRejectOut;
	iptablesRemoveTcpInput;
	iptablesRemoveUdpInput;
	iptablesSaveRules;


	/* libvirt_internal.h */
	debugFlag;
	virStateInitialize;
	virStateCleanup;
	virStateReload;
	virStateActive;
	virStateSigDispatcher;
	virDrvSupportsFeature;
	virDomainMigratePrepare;
	virDomainMigratePerform;
	virDomainMigrateFinish;
	virDomainMigratePrepare2;
	virDomainMigrateFinish2;
	virRegisterDriver;
	virRegisterNetworkDriver;
	virRegisterStateDriver;
	virRegisterStorageDriver;


	/* memory.h */
	virAlloc;
	virAllocN;
	virReallocN;
	virFree;


	/* network_conf.h */
	virNetworkAssignDef;
	virNetworkDefFormat;
	virNetworkDefFree;
	virNetworkDefParseString;
	virNetworkDeleteConfig;
	virNetworkFindByName;
	virNetworkFindByUUID;
	virNetworkLoadAllConfigs;
	virNetworkObjListFree;
	virNetworkRemoveInactive;
	virNetworkSaveConfig;


	/* nodeinfo.h */
	virNodeInfoPopulate;


	/* stats_linux.h */
	linuxDomainInterfaceStats;


	/* storage_backend.h */
	virStorageBackendForType;
	virStorageBackendFromString;
	virStorageBackendPartTableTypeFromString;
	virStorageBackendPartTableTypeToString;
	virStorageBackendRegister;
	virStorageBackendRunProgNul;
	virStorageBackendRunProgRegex;
	virStorageBackendStablePath;
	virStorageBackendUpdateVolInfo;
	virStorageBackendUpdateVolInfoFD;


	/* storage_conf.h */
	virStoragePoolDefFormat;
	virStoragePoolDefFree;
	virStoragePoolDefParse;
	virStoragePoolLoadAllConfigs;
	virStoragePoolObjAssignDef;
	virStoragePoolObjClearVols;
	virStoragePoolObjDeleteDef;
	virStoragePoolObjFindByName;
	virStoragePoolObjFindByUUID;
	virStoragePoolObjListFree;
	virStoragePoolObjRemove;
	virStoragePoolObjSaveDef;
	virStoragePoolSourceFree;
	virStoragePoolSourceListFormat;
	virStorageVolDefFindByKey;
	virStorageVolDefFindByName;
	virStorageVolDefFindByPath;
	virStorageVolDefFormat;
	virStorageVolDefFree;
	virStorageVolDefParse;
	virStoragePoolFormatDiskTypeToString;
	virStoragePoolFormatFileSystemTypeToString;
	virStoragePoolFormatFileSystemNetTypeToString;
	virStorageVolFormatFileSystemTypeToString;
	virStoragePoolTypeFromString;


	/* util.h */
	virFileReadAll;
	virStrToLong_i;
	virStrToLong_ll;
	virStrToLong_ull;
	saferead;
	safewrite;
	virMacAddrCompare;
	virEnumFromString;
	virEnumToString;
	virEventAddHandle;
	virEventRemoveHandle;
	virExec;
	virFileDeletePid;
	virFileExists;
	virFileHasSuffix;
	virFileLinkPointsTo;
	virFileMakePath;
	virFileOpenTty;
	virFileReadLimFD;
	virFileReadPid;
	virParseNumber;
	virRun;


	/* uuid.h */
	virUUIDFormat;


	/* virterror_internal.h */
	virReportErrorHelper;


	/* xml.h */
	virXPathString;


	/* Finally everything else is totally private */
    local:
	*;
};
